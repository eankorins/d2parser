### Generated by rprotoc. DO NOT EDIT!
### <proto file: protobuf\dota_usermessages.proto>
# 
# package google.protobuf;
# enum EDotaUserMessages {
# 	DOTA_UM_AddUnitToSelection = 64;
# 	DOTA_UM_AIDebugLine = 65;
# 	DOTA_UM_ChatEvent = 66;
# 	DOTA_UM_CombatHeroPositions = 67;
# 	DOTA_UM_CombatLogData = 68;
# 	DOTA_UM_CombatLogShowDeath = 70;
# 	DOTA_UM_CreateLinearProjectile = 71;
# 	DOTA_UM_DestroyLinearProjectile = 72;
# 	DOTA_UM_DodgeTrackingProjectiles = 73;
# 	DOTA_UM_GlobalLightColor = 74;
# 	DOTA_UM_GlobalLightDirection = 75;
# 	DOTA_UM_InvalidCommand = 76;
# 	DOTA_UM_LocationPing = 77;
# 	DOTA_UM_MapLine = 78;
# 	DOTA_UM_MiniKillCamInfo = 79;
# 	DOTA_UM_MinimapDebugPoint = 80;
# 	DOTA_UM_MinimapEvent = 81;
# 	DOTA_UM_NevermoreRequiem = 82;
# 	DOTA_UM_OverheadEvent = 83;
# 	DOTA_UM_SetNextAutobuyItem = 84;
# 	DOTA_UM_SharedCooldown = 85;
# 	DOTA_UM_SpectatorPlayerClick = 86;
# 	DOTA_UM_TutorialTipInfo = 87;
# 	DOTA_UM_UnitEvent = 88;
# 	DOTA_UM_ParticleManager = 89;
# 	DOTA_UM_BotChat = 90;
# 	DOTA_UM_HudError = 91;
# 	DOTA_UM_ItemPurchased = 92;
# 	DOTA_UM_Ping = 93;
# 	DOTA_UM_ItemFound = 94;
# 	DOTA_UM_CharacterSpeakConcept = 95;
# 	DOTA_UM_SwapVerify = 96;
# 	DOTA_UM_WorldLine = 97;
# 	DOTA_UM_TournamentDrop = 98;
# 	DOTA_UM_ItemAlert = 99;
# 	DOTA_UM_HalloweenDrops = 100;
# 	DOTA_UM_ChatWheel = 101;
# 	DOTA_UM_ReceivedXmasGift = 102;
# 	DOTA_UM_UpdateSharedContent = 103;
# 	DOTA_UM_TutorialRequestExp = 104;
# 	DOTA_UM_TutorialPingMinimap = 105;
# 	DOTA_UM_GamerulesStateChanged = 106;
# 	DOTA_UM_ShowSurvey = 107;
# 	DOTA_UM_TutorialFade = 108;
# 	DOTA_UM_AddQuestLogEntry = 109;
# 	DOTA_UM_SendStatPopup = 110;
# 	DOTA_UM_TutorialFinish = 111;
# 	DOTA_UM_SendRoshanPopup = 112;
# 	DOTA_UM_SendGenericToolTip = 113;
# 	DOTA_UM_SendFinalGold = 114;
# }
# 
# enum DOTA_CHAT_MESSAGE {
# 	CHAT_MESSAGE_INVALID = -1;
# 	CHAT_MESSAGE_HERO_KILL = 0;
# 	CHAT_MESSAGE_HERO_DENY = 1;
# 	CHAT_MESSAGE_BARRACKS_KILL = 2;
# 	CHAT_MESSAGE_TOWER_KILL = 3;
# 	CHAT_MESSAGE_TOWER_DENY = 4;
# 	CHAT_MESSAGE_FIRSTBLOOD = 5;
# 	CHAT_MESSAGE_STREAK_KILL = 6;
# 	CHAT_MESSAGE_BUYBACK = 7;
# 	CHAT_MESSAGE_AEGIS = 8;
# 	CHAT_MESSAGE_ROSHAN_KILL = 9;
# 	CHAT_MESSAGE_COURIER_LOST = 10;
# 	CHAT_MESSAGE_COURIER_RESPAWNED = 11;
# 	CHAT_MESSAGE_GLYPH_USED = 12;
# 	CHAT_MESSAGE_ITEM_PURCHASE = 13;
# 	CHAT_MESSAGE_CONNECT = 14;
# 	CHAT_MESSAGE_DISCONNECT = 15;
# 	CHAT_MESSAGE_DISCONNECT_WAIT_FOR_RECONNECT = 16;
# 	CHAT_MESSAGE_DISCONNECT_TIME_REMAINING = 17;
# 	CHAT_MESSAGE_DISCONNECT_TIME_REMAINING_PLURAL = 18;
# 	CHAT_MESSAGE_RECONNECT = 19;
# 	CHAT_MESSAGE_ABANDON = 20;
# 	CHAT_MESSAGE_SAFE_TO_LEAVE = 21;
# 	CHAT_MESSAGE_RUNE_PICKUP = 22;
# 	CHAT_MESSAGE_RUNE_BOTTLE = 23;
# 	CHAT_MESSAGE_INTHEBAG = 24;
# 	CHAT_MESSAGE_SECRETSHOP = 25;
# 	CHAT_MESSAGE_ITEM_AUTOPURCHASED = 26;
# 	CHAT_MESSAGE_ITEMS_COMBINED = 27;
# 	CHAT_MESSAGE_SUPER_CREEPS = 28;
# 	CHAT_MESSAGE_CANT_USE_ACTION_ITEM = 29;
# 	CHAT_MESSAGE_CHARGES_EXHAUSTED = 30;
# 	CHAT_MESSAGE_CANTPAUSE = 31;
# 	CHAT_MESSAGE_NOPAUSESLEFT = 32;
# 	CHAT_MESSAGE_CANTPAUSEYET = 33;
# 	CHAT_MESSAGE_PAUSED = 34;
# 	CHAT_MESSAGE_UNPAUSE_COUNTDOWN = 35;
# 	CHAT_MESSAGE_UNPAUSED = 36;
# 	CHAT_MESSAGE_AUTO_UNPAUSED = 37;
# 	CHAT_MESSAGE_YOUPAUSED = 38;
# 	CHAT_MESSAGE_CANTUNPAUSETEAM = 39;
# 	CHAT_MESSAGE_SAFE_TO_LEAVE_ABANDONER = 40;
# 	CHAT_MESSAGE_VOICE_TEXT_BANNED = 41;
# 	CHAT_MESSAGE_SPECTATORS_WATCHING_THIS_GAME = 42;
# 	CHAT_MESSAGE_REPORT_REMINDER = 43;
# 	CHAT_MESSAGE_ECON_ITEM = 44;
# 	CHAT_MESSAGE_TAUNT = 45;
# 	CHAT_MESSAGE_RANDOM = 46;
# 	CHAT_MESSAGE_RD_TURN = 47;
# 	CHAT_MESSAGE_SAFE_TO_LEAVE_ABANDONER_EARLY = 48;
# 	CHAT_MESSAGE_DROP_RATE_BONUS = 49;
# 	CHAT_MESSAGE_NO_BATTLE_POINTS = 50;
# 	CHAT_MESSAGE_DENIED_AEGIS = 51;
# 	CHAT_MESSAGE_INFORMATIONAL = 52;
# 	CHAT_MESSAGE_AEGIS_STOLEN = 53;
# 	CHAT_MESSAGE_ROSHAN_CANDY = 54;
# 	CHAT_MESSAGE_ITEM_GIFTED = 55;
# 	CHAT_MESSAGE_HERO_KILL_WITH_GREEVIL = 56;
# }
# 
# enum DOTA_NO_BATTLE_POINTS_REASONS {
# 	NO_BATTLE_POINTS_WRONG_LOBBY_TYPE = 1;
# 	NO_BATTLE_POINTS_PRACTICE_BOTS = 2;
# 	NO_BATTLE_POINTS_CHEATS_ENABLED = 3;
# 	NO_BATTLE_POINTS_LOW_PRIORITY = 4;
# }
# 
# enum DOTA_CHAT_INFORMATIONAL {
# 	COOP_BATTLE_POINTS_RULES = 1;
# }
# 
# enum DOTA_COMBATLOG_TYPES {
# 	DOTA_COMBATLOG_DAMAGE = 0;
# 	DOTA_COMBATLOG_HEAL = 1;
# 	DOTA_COMBATLOG_MODIFIER_ADD = 2;
# 	DOTA_COMBATLOG_MODIFIER_REMOVE = 3;
# 	DOTA_COMBATLOG_DEATH = 4;
# }
# 
# enum EDotaEntityMessages {
# 	DOTA_UNIT_SPEECH = 0;
# 	DOTA_UNIT_SPEECH_MUTE = 1;
# 	DOTA_UNIT_ADD_GESTURE = 2;
# 	DOTA_UNIT_REMOVE_GESTURE = 3;
# 	DOTA_UNIT_REMOVE_ALL_GESTURES = 4;
# 	DOTA_UNIT_FADE_GESTURE = 6;
# 	DOTA_UNIT_SPEECH_CLIENTSIDE_RULES = 7;
# }
# 
# enum DOTA_PARTICLE_MESSAGE {
# 	DOTA_PARTICLE_MANAGER_EVENT_CREATE = 0;
# 	DOTA_PARTICLE_MANAGER_EVENT_UPDATE = 1;
# 	DOTA_PARTICLE_MANAGER_EVENT_UPDATE_FORWARD = 2;
# 	DOTA_PARTICLE_MANAGER_EVENT_UPDATE_ORIENTATION = 3;
# 	DOTA_PARTICLE_MANAGER_EVENT_UPDATE_FALLBACK = 4;
# 	DOTA_PARTICLE_MANAGER_EVENT_UPDATE_ENT = 5;
# 	DOTA_PARTICLE_MANAGER_EVENT_UPDATE_OFFSET = 6;
# 	DOTA_PARTICLE_MANAGER_EVENT_DESTROY = 7;
# 	DOTA_PARTICLE_MANAGER_EVENT_DESTROY_INVOLVING = 8;
# 	DOTA_PARTICLE_MANAGER_EVENT_RELEASE = 9;
# 	DOTA_PARTICLE_MANAGER_EVENT_LATENCY = 10;
# 	DOTA_PARTICLE_MANAGER_EVENT_SHOULD_DRAW = 11;
# 	DOTA_PARTICLE_MANAGER_EVENT_FROZEN = 12;
# }
# 
# enum DOTA_OVERHEAD_ALERT {
# 	OVERHEAD_ALERT_GOLD = 0;
# 	OVERHEAD_ALERT_DENY = 1;
# 	OVERHEAD_ALERT_CRITICAL = 2;
# 	OVERHEAD_ALERT_XP = 3;
# 	OVERHEAD_ALERT_BONUS_SPELL_DAMAGE = 4;
# 	OVERHEAD_ALERT_MISS = 5;
# 	OVERHEAD_ALERT_DAMAGE = 6;
# 	OVERHEAD_ALERT_EVADE = 7;
# 	OVERHEAD_ALERT_BLOCK = 8;
# 	OVERHEAD_ALERT_BONUS_POISON_DAMAGE = 9;
# 	OVERHEAD_ALERT_HEAL = 10;
# 	OVERHEAD_ALERT_MANA_ADD = 11;
# 	OVERHEAD_ALERT_MANA_LOSS = 12;
# 	OVERHEAD_ALERT_LAST_HIT_EARLY = 13;
# 	OVERHEAD_ALERT_LAST_HIT_CLOSE = 14;
# 	OVERHEAD_ALERT_LAST_HIT_MISS = 15;
# }
# 
# message CDOTAUserMsg_AIDebugLine {
# 	optional string message = 1;
# }
# 
# message CDOTAUserMsg_Ping {
# 	optional string message = 1;
# }
# 
# message CDOTAUserMsg_SwapVerify {
# 	optional uint32 player_id = 1;
# }
# 
# message CDOTAUserMsg_ChatEvent {
# 	required DOTA_CHAT_MESSAGE type = 1 [default = CHAT_MESSAGE_INVALID];
# 	optional uint32 value = 2;
# 	optional sint32 playerid_1 = 3 [default = -1];
# 	optional sint32 playerid_2 = 4 [default = -1];
# 	optional sint32 playerid_3 = 5 [default = -1];
# 	optional sint32 playerid_4 = 6 [default = -1];
# 	optional sint32 playerid_5 = 7 [default = -1];
# 	optional sint32 playerid_6 = 8 [default = -1];
# }
# 
# message CDOTAUserMsg_CombatLogData {
# 	optional DOTA_COMBATLOG_TYPES type = 1 [default = DOTA_COMBATLOG_DAMAGE];
# 	optional uint32 target_name = 2;
# 	optional uint32 attacker_name = 3;
# 	optional bool attacker_illusion = 4;
# 	optional bool target_illusion = 5;
# 	optional uint32 inflictor_name = 6;
# 	optional int32 value = 7;
# 	optional int32 health = 8;
# 	optional float time = 9;
# }
# 
# message CDOTAUserMsg_CombatLogShowDeath {
# }
# 
# message CDOTAUserMsg_BotChat {
# 	optional uint32 player_id = 1;
# 	optional string format = 2;
# 	optional string message = 3;
# 	optional string target = 4;
# }
# 
# message CDOTAUserMsg_CombatHeroPositions {
# 	optional uint32 index = 1;
# 	optional int32 time = 2;
# 	optional CMsgVector2D world_pos = 3;
# 	optional int32 health = 4;
# }
# 
# message CDOTAUserMsg_MiniKillCamInfo {
# 	message Attacker {
# 		message Ability {
# 			optional uint32 ability = 1;
# 			optional int32 damage = 2;
# 		}
# 
# 		optional uint32 attacker = 1;
# 		optional int32 total_damage = 2;
# 		repeated CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability abilities = 3;
# 	}
# 
# 	repeated CDOTAUserMsg_MiniKillCamInfo.Attacker attackers = 1;
# }
# 
# message CDOTAUserMsg_GlobalLightColor {
# 	optional uint32 color = 1;
# 	optional float duration = 2;
# }
# 
# message CDOTAUserMsg_GlobalLightDirection {
# 	optional CMsgVector direction = 1;
# 	optional float duration = 2;
# }
# 
# message CDOTAUserMsg_LocationPing {
# 	optional uint32 player_id = 1;
# 	optional CDOTAMsg_LocationPing location_ping = 2;
# }
# 
# message CDOTAUserMsg_ItemAlert {
# 	optional uint32 player_id = 1;
# 	optional CDOTAMsg_ItemAlert item_alert = 2;
# }
# 
# message CDOTAUserMsg_MinimapEvent {
# 	optional int32 event_type = 1;
# 	optional int32 entity_handle = 2;
# 	optional int32 x = 3;
# 	optional int32 y = 4;
# 	optional int32 duration = 5;
# }
# 
# message CDOTAUserMsg_MapLine {
# 	optional int32 player_id = 1;
# 	optional CDOTAMsg_MapLine mapline = 2;
# }
# 
# message CDOTAUserMsg_MinimapDebugPoint {
# 	optional CMsgVector location = 1;
# 	optional uint32 color = 2;
# 	optional int32 size = 3;
# 	optional float duration = 4;
# }
# 
# message CDOTAUserMsg_CreateLinearProjectile {
# 	optional CMsgVector origin = 1;
# 	optional CMsgVector2D velocity = 2;
# 	optional int32 latency = 3;
# 	optional int32 entindex = 4;
# 	optional int32 particle_index = 5;
# 	optional int32 handle = 6;
# }
# 
# message CDOTAUserMsg_DestroyLinearProjectile {
# 	optional int32 handle = 1;
# }
# 
# message CDOTAUserMsg_DodgeTrackingProjectiles {
# 	required int32 entindex = 1;
# }
# 
# message CDOTAUserMsg_SpectatorPlayerClick {
# 	required int32 entindex = 1;
# 	optional int32 order_type = 2;
# 	optional int32 target_index = 3;
# }
# 
# message CDOTAUserMsg_NevermoreRequiem {
# 	optional int32 entity_handle = 1;
# 	optional int32 lines = 2;
# 	optional CMsgVector origin = 3;
# }
# 
# message CDOTAUserMsg_InvalidCommand {
# 	optional string message = 1;
# }
# 
# message CDOTAUserMsg_HudError {
# 	optional int32 order_id = 1;
# }
# 
# message CDOTAUserMsg_SharedCooldown {
# 	optional int32 entindex = 1;
# 	optional string name = 2;
# 	optional float cooldown = 3;
# 	optional int32 name_index = 4;
# }
# 
# message CDOTAUserMsg_SetNextAutobuyItem {
# 	optional string name = 1;
# }
# 
# message CDOTAUserMsg_HalloweenDrops {
# 	repeated uint32 item_defs = 1;
# 	repeated uint32 player_ids = 2;
# 	optional uint32 prize_list = 3;
# }
# 
# message CDOTAResponseQuerySerialized {
# 	message Fact {
# 		enum ValueType {
# 			NUMERIC = 1;
# 			STRING = 2;
# 		}
# 
# 		required int32 key = 1;
# 		required CDOTAResponseQuerySerialized.Fact.ValueType valtype = 2 [default = NUMERIC];
# 		optional float val_numeric = 3;
# 		optional string val_string = 4;
# 	}
# 
# 	repeated CDOTAResponseQuerySerialized.Fact facts = 1;
# }
# 
# message CDOTASpeechMatchOnClient {
# 	optional int32 concept = 1;
# 	optional int32 recipient_type = 2;
# 	optional CDOTAResponseQuerySerialized responsequery = 3;
# 	optional sfixed32 randomseed = 4 [default = 0];
# }
# 
# message CDOTAUserMsg_UnitEvent {
# 	message Speech {
# 		optional int32 concept = 1;
# 		optional string response = 2;
# 		optional int32 recipient_type = 3;
# 		optional int32 level = 4;
# 		optional bool muteable = 5 [default = false];
# 	}
# 
# 	message SpeechMute {
# 		optional float delay = 1 [default = 0.5];
# 	}
# 
# 	message AddGesture {
# 		optional Activity activity = 1 [default = ACT_INVALID];
# 		optional int32 slot = 2;
# 		optional float fade_in = 3 [default = 0];
# 		optional float fade_out = 4 [default = 0.1];
# 	}
# 
# 	message RemoveGesture {
# 		optional Activity activity = 1 [default = ACT_INVALID];
# 	}
# 
# 	message BloodImpact {
# 		optional int32 scale = 1;
# 		optional int32 x_normal = 2;
# 		optional int32 y_normal = 3;
# 	}
# 
# 	message FadeGesture {
# 		optional Activity activity = 1 [default = ACT_INVALID];
# 	}
# 
# 	required EDotaEntityMessages msg_type = 1 [default = DOTA_UNIT_SPEECH];
# 	required int32 entity_index = 2;
# 	optional CDOTAUserMsg_UnitEvent.Speech speech = 3;
# 	optional CDOTAUserMsg_UnitEvent.SpeechMute speech_mute = 4;
# 	optional CDOTAUserMsg_UnitEvent.AddGesture add_gesture = 5;
# 	optional CDOTAUserMsg_UnitEvent.RemoveGesture remove_gesture = 6;
# 	optional CDOTAUserMsg_UnitEvent.BloodImpact blood_impact = 7;
# 	optional CDOTAUserMsg_UnitEvent.FadeGesture fade_gesture = 8;
# 	optional CDOTASpeechMatchOnClient speech_match_on_client = 9;
# }
# 
# message CDOTAUserMsg_ItemPurchased {
# 	optional int32 item_index = 1;
# }
# 
# message CDOTAUserMsg_ItemFound {
# 	optional int32 player = 1;
# 	optional int32 quality = 2;
# 	optional int32 rarity = 3;
# 	optional int32 method = 4;
# 	optional int32 itemdef = 5;
# }
# 
# message CDOTAUserMsg_ParticleManager {
# 	message ReleaseParticleIndex {
# 	}
# 
# 	message CreateParticle {
# 		optional int32 particle_name_index = 1;
# 		optional int32 attach_type = 2;
# 		optional int32 entity_handle = 3;
# 	}
# 
# 	message DestroyParticle {
# 		optional bool destroy_immediately = 1;
# 	}
# 
# 	message DestroyParticleInvolving {
# 		optional bool destroy_immediately = 1;
# 		optional int32 entity_handle = 3;
# 	}
# 
# 	message UpdateParticle {
# 		optional int32 control_point = 1;
# 		optional CMsgVector position = 2;
# 	}
# 
# 	message UpdateParticleFwd {
# 		optional int32 control_point = 1;
# 		optional CMsgVector forward = 2;
# 	}
# 
# 	message UpdateParticleOrient {
# 		optional int32 control_point = 1;
# 		optional CMsgVector forward = 2;
# 		optional CMsgVector right = 3;
# 		optional CMsgVector up = 4;
# 	}
# 
# 	message UpdateParticleFallback {
# 		optional int32 control_point = 1;
# 		optional CMsgVector position = 2;
# 	}
# 
# 	message UpdateParticleOffset {
# 		optional int32 control_point = 1;
# 		optional CMsgVector origin_offset = 2;
# 	}
# 
# 	message UpdateParticleEnt {
# 		optional int32 control_point = 1;
# 		optional int32 entity_handle = 2;
# 		optional int32 attach_type = 3;
# 		optional int32 attachment = 4;
# 		optional CMsgVector fallback_position = 5;
# 	}
# 
# 	message UpdateParticleSetFrozen {
# 		optional bool set_frozen = 1;
# 	}
# 
# 	message UpdateParticleShouldDraw {
# 		optional bool should_draw = 1;
# 	}
# 
# 	required DOTA_PARTICLE_MESSAGE type = 1 [default = DOTA_PARTICLE_MANAGER_EVENT_CREATE];
# 	required uint32 index = 2;
# 	optional CDOTAUserMsg_ParticleManager.ReleaseParticleIndex release_particle_index = 3;
# 	optional CDOTAUserMsg_ParticleManager.CreateParticle create_particle = 4;
# 	optional CDOTAUserMsg_ParticleManager.DestroyParticle destroy_particle = 5;
# 	optional CDOTAUserMsg_ParticleManager.DestroyParticleInvolving destroy_particle_involving = 6;
# 	optional CDOTAUserMsg_ParticleManager.UpdateParticle update_particle = 7;
# 	optional CDOTAUserMsg_ParticleManager.UpdateParticleFwd update_particle_fwd = 8;
# 	optional CDOTAUserMsg_ParticleManager.UpdateParticleOrient update_particle_orient = 9;
# 	optional CDOTAUserMsg_ParticleManager.UpdateParticleFallback update_particle_fallback = 10;
# 	optional CDOTAUserMsg_ParticleManager.UpdateParticleOffset update_particle_offset = 11;
# 	optional CDOTAUserMsg_ParticleManager.UpdateParticleEnt update_particle_ent = 12;
# 	optional CDOTAUserMsg_ParticleManager.UpdateParticleShouldDraw update_particle_should_draw = 14;
# 	optional CDOTAUserMsg_ParticleManager.UpdateParticleSetFrozen update_particle_set_frozen = 15;
# }
# 
# message CDOTAUserMsg_OverheadEvent {
# 	required DOTA_OVERHEAD_ALERT message_type = 1 [default = OVERHEAD_ALERT_GOLD];
# 	optional int32 value = 2;
# 	optional int32 target_player_entindex = 3;
# 	optional int32 target_entindex = 4;
# 	optional int32 source_player_entindex = 5;
# }
# 
# message CDOTAUserMsg_TutorialTipInfo {
# 	optional string name = 1;
# 	optional int32 progress = 2;
# }
# 
# message CDOTAUserMsg_TutorialFinish {
# 	optional string heading = 1;
# 	optional string emblem = 2;
# 	optional string body = 3;
# 	optional bool success = 4;
# }
# 
# message CDOTAUserMsg_SendGenericToolTip {
# 	optional string title = 1;
# 	optional string text = 2;
# 	optional int32 entindex = 3;
# 	optional bool close = 4;
# }
# 
# message CDOTAUserMsg_WorldLine {
# 	optional int32 player_id = 1;
# 	optional CDOTAMsg_WorldLine worldline = 2;
# }
# 
# message CDOTAUserMsg_TournamentDrop {
# 	optional string winner_name = 1;
# 	optional int32 event_type = 2;
# }
# 
# message CDOTAUserMsg_ChatWheel {
# 	optional EDOTAChatWheelMessage chat_message = 1 [default = k_EDOTA_CW_Ok];
# 	optional uint32 player_id = 2;
# 	optional uint32 account_id = 3;
# }
# 
# message CDOTAUserMsg_ReceivedXmasGift {
# 	optional int32 player_id = 1;
# 	optional string item_name = 2;
# 	optional int32 inventory_slot = 3;
# }
# 
# message CDOTAUserMsg_ShowSurvey {
# 	optional int32 survey_id = 1;
# }
# 
# message CDOTAUserMsg_UpdateSharedContent {
# 	optional int32 slot_type = 1;
# }
# 
# message CDOTAUserMsg_TutorialRequestExp {
# }
# 
# message CDOTAUserMsg_TutorialFade {
# 	optional int32 tgt_alpha = 1;
# }
# 
# message CDOTAUserMsg_TutorialPingMinimap {
# 	optional uint32 player_id = 1;
# 	optional float pos_x = 2;
# 	optional float pos_y = 3;
# 	optional float pos_z = 4;
# 	optional int32 entity_index = 5;
# }
# 
# message CDOTA_UM_GamerulesStateChanged {
# 	optional uint32 state = 1;
# }
# 
# message CDOTAUserMsg_AddQuestLogEntry {
# 	optional string npc_name = 1;
# 	optional string npc_dialog = 2;
# 	optional bool quest = 3;
# 	optional int32 quest_type = 4;
# }
# 
# message CDOTAUserMsg_SendStatPopup {
# 	optional int32 player_id = 1;
# 	optional CDOTAMsg_SendStatPopup statpopup = 2;
# }
# 
# message CDOTAUserMsg_SendRoshanPopup {
# 	optional bool reclaimed = 1;
# 	optional int32 gametime = 2;
# }
# 
# message CDOTAUserMsg_SendFinalGold {
# 	repeated uint32 reliable_gold = 1;
# 	repeated uint32 unreliable_gold = 2;
# }
# 

require_relative 'protobuf/message/message'
require_relative 'protobuf/message/enum'
require_relative 'protobuf/message/service'
require_relative 'protobuf/message/extend'

module D2Parser
  module Proto
    class EDotaUserMessages < ::Protobuf::Enum
      defined_in __FILE__
      DOTA_UM_AddUnitToSelection = value(:DOTA_UM_AddUnitToSelection, 64)
      DOTA_UM_AIDebugLine = value(:DOTA_UM_AIDebugLine, 65)
      DOTA_UM_ChatEvent = value(:DOTA_UM_ChatEvent, 66)
      DOTA_UM_CombatHeroPositions = value(:DOTA_UM_CombatHeroPositions, 67)
      DOTA_UM_CombatLogData = value(:DOTA_UM_CombatLogData, 68)
      DOTA_UM_CombatLogShowDeath = value(:DOTA_UM_CombatLogShowDeath, 70)
      DOTA_UM_CreateLinearProjectile = value(:DOTA_UM_CreateLinearProjectile, 71)
      DOTA_UM_DestroyLinearProjectile = value(:DOTA_UM_DestroyLinearProjectile, 72)
      DOTA_UM_DodgeTrackingProjectiles = value(:DOTA_UM_DodgeTrackingProjectiles, 73)
      DOTA_UM_GlobalLightColor = value(:DOTA_UM_GlobalLightColor, 74)
      DOTA_UM_GlobalLightDirection = value(:DOTA_UM_GlobalLightDirection, 75)
      DOTA_UM_InvalidCommand = value(:DOTA_UM_InvalidCommand, 76)
      DOTA_UM_LocationPing = value(:DOTA_UM_LocationPing, 77)
      DOTA_UM_MapLine = value(:DOTA_UM_MapLine, 78)
      DOTA_UM_MiniKillCamInfo = value(:DOTA_UM_MiniKillCamInfo, 79)
      DOTA_UM_MinimapDebugPoint = value(:DOTA_UM_MinimapDebugPoint, 80)
      DOTA_UM_MinimapEvent = value(:DOTA_UM_MinimapEvent, 81)
      DOTA_UM_NevermoreRequiem = value(:DOTA_UM_NevermoreRequiem, 82)
      DOTA_UM_OverheadEvent = value(:DOTA_UM_OverheadEvent, 83)
      DOTA_UM_SetNextAutobuyItem = value(:DOTA_UM_SetNextAutobuyItem, 84)
      DOTA_UM_SharedCooldown = value(:DOTA_UM_SharedCooldown, 85)
      DOTA_UM_SpectatorPlayerClick = value(:DOTA_UM_SpectatorPlayerClick, 86)
      DOTA_UM_TutorialTipInfo = value(:DOTA_UM_TutorialTipInfo, 87)
      DOTA_UM_UnitEvent = value(:DOTA_UM_UnitEvent, 88)
      DOTA_UM_ParticleManager = value(:DOTA_UM_ParticleManager, 89)
      DOTA_UM_BotChat = value(:DOTA_UM_BotChat, 90)
      DOTA_UM_HudError = value(:DOTA_UM_HudError, 91)
      DOTA_UM_ItemPurchased = value(:DOTA_UM_ItemPurchased, 92)
      DOTA_UM_Ping = value(:DOTA_UM_Ping, 93)
      DOTA_UM_ItemFound = value(:DOTA_UM_ItemFound, 94)
      DOTA_UM_CharacterSpeakConcept = value(:DOTA_UM_CharacterSpeakConcept, 95)
      DOTA_UM_SwapVerify = value(:DOTA_UM_SwapVerify, 96)
      DOTA_UM_WorldLine = value(:DOTA_UM_WorldLine, 97)
      DOTA_UM_TournamentDrop = value(:DOTA_UM_TournamentDrop, 98)
      DOTA_UM_ItemAlert = value(:DOTA_UM_ItemAlert, 99)
      DOTA_UM_HalloweenDrops = value(:DOTA_UM_HalloweenDrops, 100)
      DOTA_UM_ChatWheel = value(:DOTA_UM_ChatWheel, 101)
      DOTA_UM_ReceivedXmasGift = value(:DOTA_UM_ReceivedXmasGift, 102)
      DOTA_UM_UpdateSharedContent = value(:DOTA_UM_UpdateSharedContent, 103)
      DOTA_UM_TutorialRequestExp = value(:DOTA_UM_TutorialRequestExp, 104)
      DOTA_UM_TutorialPingMinimap = value(:DOTA_UM_TutorialPingMinimap, 105)
      DOTA_UM_GamerulesStateChanged = value(:DOTA_UM_GamerulesStateChanged, 106)
      DOTA_UM_ShowSurvey = value(:DOTA_UM_ShowSurvey, 107)
      DOTA_UM_TutorialFade = value(:DOTA_UM_TutorialFade, 108)
      DOTA_UM_AddQuestLogEntry = value(:DOTA_UM_AddQuestLogEntry, 109)
      DOTA_UM_SendStatPopup = value(:DOTA_UM_SendStatPopup, 110)
      DOTA_UM_TutorialFinish = value(:DOTA_UM_TutorialFinish, 111)
      DOTA_UM_SendRoshanPopup = value(:DOTA_UM_SendRoshanPopup, 112)
      DOTA_UM_SendGenericToolTip = value(:DOTA_UM_SendGenericToolTip, 113)
      DOTA_UM_SendFinalGold = value(:DOTA_UM_SendFinalGold, 114)
    end
    class DOTA_CHAT_MESSAGE < ::Protobuf::Enum
      defined_in __FILE__
      CHAT_MESSAGE_INVALID = value(:CHAT_MESSAGE_INVALID, -1)
      CHAT_MESSAGE_HERO_KILL = value(:CHAT_MESSAGE_HERO_KILL, 0)
      CHAT_MESSAGE_HERO_DENY = value(:CHAT_MESSAGE_HERO_DENY, 1)
      CHAT_MESSAGE_BARRACKS_KILL = value(:CHAT_MESSAGE_BARRACKS_KILL, 2)
      CHAT_MESSAGE_TOWER_KILL = value(:CHAT_MESSAGE_TOWER_KILL, 3)
      CHAT_MESSAGE_TOWER_DENY = value(:CHAT_MESSAGE_TOWER_DENY, 4)
      CHAT_MESSAGE_FIRSTBLOOD = value(:CHAT_MESSAGE_FIRSTBLOOD, 5)
      CHAT_MESSAGE_STREAK_KILL = value(:CHAT_MESSAGE_STREAK_KILL, 6)
      CHAT_MESSAGE_BUYBACK = value(:CHAT_MESSAGE_BUYBACK, 7)
      CHAT_MESSAGE_AEGIS = value(:CHAT_MESSAGE_AEGIS, 8)
      CHAT_MESSAGE_ROSHAN_KILL = value(:CHAT_MESSAGE_ROSHAN_KILL, 9)
      CHAT_MESSAGE_COURIER_LOST = value(:CHAT_MESSAGE_COURIER_LOST, 10)
      CHAT_MESSAGE_COURIER_RESPAWNED = value(:CHAT_MESSAGE_COURIER_RESPAWNED, 11)
      CHAT_MESSAGE_GLYPH_USED = value(:CHAT_MESSAGE_GLYPH_USED, 12)
      CHAT_MESSAGE_ITEM_PURCHASE = value(:CHAT_MESSAGE_ITEM_PURCHASE, 13)
      CHAT_MESSAGE_CONNECT = value(:CHAT_MESSAGE_CONNECT, 14)
      CHAT_MESSAGE_DISCONNECT = value(:CHAT_MESSAGE_DISCONNECT, 15)
      CHAT_MESSAGE_DISCONNECT_WAIT_FOR_RECONNECT = value(:CHAT_MESSAGE_DISCONNECT_WAIT_FOR_RECONNECT, 16)
      CHAT_MESSAGE_DISCONNECT_TIME_REMAINING = value(:CHAT_MESSAGE_DISCONNECT_TIME_REMAINING, 17)
      CHAT_MESSAGE_DISCONNECT_TIME_REMAINING_PLURAL = value(:CHAT_MESSAGE_DISCONNECT_TIME_REMAINING_PLURAL, 18)
      CHAT_MESSAGE_RECONNECT = value(:CHAT_MESSAGE_RECONNECT, 19)
      CHAT_MESSAGE_ABANDON = value(:CHAT_MESSAGE_ABANDON, 20)
      CHAT_MESSAGE_SAFE_TO_LEAVE = value(:CHAT_MESSAGE_SAFE_TO_LEAVE, 21)
      CHAT_MESSAGE_RUNE_PICKUP = value(:CHAT_MESSAGE_RUNE_PICKUP, 22)
      CHAT_MESSAGE_RUNE_BOTTLE = value(:CHAT_MESSAGE_RUNE_BOTTLE, 23)
      CHAT_MESSAGE_INTHEBAG = value(:CHAT_MESSAGE_INTHEBAG, 24)
      CHAT_MESSAGE_SECRETSHOP = value(:CHAT_MESSAGE_SECRETSHOP, 25)
      CHAT_MESSAGE_ITEM_AUTOPURCHASED = value(:CHAT_MESSAGE_ITEM_AUTOPURCHASED, 26)
      CHAT_MESSAGE_ITEMS_COMBINED = value(:CHAT_MESSAGE_ITEMS_COMBINED, 27)
      CHAT_MESSAGE_SUPER_CREEPS = value(:CHAT_MESSAGE_SUPER_CREEPS, 28)
      CHAT_MESSAGE_CANT_USE_ACTION_ITEM = value(:CHAT_MESSAGE_CANT_USE_ACTION_ITEM, 29)
      CHAT_MESSAGE_CHARGES_EXHAUSTED = value(:CHAT_MESSAGE_CHARGES_EXHAUSTED, 30)
      CHAT_MESSAGE_CANTPAUSE = value(:CHAT_MESSAGE_CANTPAUSE, 31)
      CHAT_MESSAGE_NOPAUSESLEFT = value(:CHAT_MESSAGE_NOPAUSESLEFT, 32)
      CHAT_MESSAGE_CANTPAUSEYET = value(:CHAT_MESSAGE_CANTPAUSEYET, 33)
      CHAT_MESSAGE_PAUSED = value(:CHAT_MESSAGE_PAUSED, 34)
      CHAT_MESSAGE_UNPAUSE_COUNTDOWN = value(:CHAT_MESSAGE_UNPAUSE_COUNTDOWN, 35)
      CHAT_MESSAGE_UNPAUSED = value(:CHAT_MESSAGE_UNPAUSED, 36)
      CHAT_MESSAGE_AUTO_UNPAUSED = value(:CHAT_MESSAGE_AUTO_UNPAUSED, 37)
      CHAT_MESSAGE_YOUPAUSED = value(:CHAT_MESSAGE_YOUPAUSED, 38)
      CHAT_MESSAGE_CANTUNPAUSETEAM = value(:CHAT_MESSAGE_CANTUNPAUSETEAM, 39)
      CHAT_MESSAGE_SAFE_TO_LEAVE_ABANDONER = value(:CHAT_MESSAGE_SAFE_TO_LEAVE_ABANDONER, 40)
      CHAT_MESSAGE_VOICE_TEXT_BANNED = value(:CHAT_MESSAGE_VOICE_TEXT_BANNED, 41)
      CHAT_MESSAGE_SPECTATORS_WATCHING_THIS_GAME = value(:CHAT_MESSAGE_SPECTATORS_WATCHING_THIS_GAME, 42)
      CHAT_MESSAGE_REPORT_REMINDER = value(:CHAT_MESSAGE_REPORT_REMINDER, 43)
      CHAT_MESSAGE_ECON_ITEM = value(:CHAT_MESSAGE_ECON_ITEM, 44)
      CHAT_MESSAGE_TAUNT = value(:CHAT_MESSAGE_TAUNT, 45)
      CHAT_MESSAGE_RANDOM = value(:CHAT_MESSAGE_RANDOM, 46)
      CHAT_MESSAGE_RD_TURN = value(:CHAT_MESSAGE_RD_TURN, 47)
      CHAT_MESSAGE_SAFE_TO_LEAVE_ABANDONER_EARLY = value(:CHAT_MESSAGE_SAFE_TO_LEAVE_ABANDONER_EARLY, 48)
      CHAT_MESSAGE_DROP_RATE_BONUS = value(:CHAT_MESSAGE_DROP_RATE_BONUS, 49)
      CHAT_MESSAGE_NO_BATTLE_POINTS = value(:CHAT_MESSAGE_NO_BATTLE_POINTS, 50)
      CHAT_MESSAGE_DENIED_AEGIS = value(:CHAT_MESSAGE_DENIED_AEGIS, 51)
      CHAT_MESSAGE_INFORMATIONAL = value(:CHAT_MESSAGE_INFORMATIONAL, 52)
      CHAT_MESSAGE_AEGIS_STOLEN = value(:CHAT_MESSAGE_AEGIS_STOLEN, 53)
      CHAT_MESSAGE_ROSHAN_CANDY = value(:CHAT_MESSAGE_ROSHAN_CANDY, 54)
      CHAT_MESSAGE_ITEM_GIFTED = value(:CHAT_MESSAGE_ITEM_GIFTED, 55)
      CHAT_MESSAGE_HERO_KILL_WITH_GREEVIL = value(:CHAT_MESSAGE_HERO_KILL_WITH_GREEVIL, 56)
    end
    class DOTA_NO_BATTLE_POINTS_REASONS < ::Protobuf::Enum
      defined_in __FILE__
      NO_BATTLE_POINTS_WRONG_LOBBY_TYPE = value(:NO_BATTLE_POINTS_WRONG_LOBBY_TYPE, 1)
      NO_BATTLE_POINTS_PRACTICE_BOTS = value(:NO_BATTLE_POINTS_PRACTICE_BOTS, 2)
      NO_BATTLE_POINTS_CHEATS_ENABLED = value(:NO_BATTLE_POINTS_CHEATS_ENABLED, 3)
      NO_BATTLE_POINTS_LOW_PRIORITY = value(:NO_BATTLE_POINTS_LOW_PRIORITY, 4)
    end
    class DOTA_CHAT_INFORMATIONAL < ::Protobuf::Enum
      defined_in __FILE__
      COOP_BATTLE_POINTS_RULES = value(:COOP_BATTLE_POINTS_RULES, 1)
    end
    class DOTA_COMBATLOG_TYPES < ::Protobuf::Enum
      defined_in __FILE__
      DOTA_COMBATLOG_DAMAGE = value(:DOTA_COMBATLOG_DAMAGE, 0)
      DOTA_COMBATLOG_HEAL = value(:DOTA_COMBATLOG_HEAL, 1)
      DOTA_COMBATLOG_MODIFIER_ADD = value(:DOTA_COMBATLOG_MODIFIER_ADD, 2)
      DOTA_COMBATLOG_MODIFIER_REMOVE = value(:DOTA_COMBATLOG_MODIFIER_REMOVE, 3)
      DOTA_COMBATLOG_DEATH = value(:DOTA_COMBATLOG_DEATH, 4)
    end
    class EDotaEntityMessages < ::Protobuf::Enum
      defined_in __FILE__
      DOTA_UNIT_SPEECH = value(:DOTA_UNIT_SPEECH, 0)
      DOTA_UNIT_SPEECH_MUTE = value(:DOTA_UNIT_SPEECH_MUTE, 1)
      DOTA_UNIT_ADD_GESTURE = value(:DOTA_UNIT_ADD_GESTURE, 2)
      DOTA_UNIT_REMOVE_GESTURE = value(:DOTA_UNIT_REMOVE_GESTURE, 3)
      DOTA_UNIT_REMOVE_ALL_GESTURES = value(:DOTA_UNIT_REMOVE_ALL_GESTURES, 4)
      DOTA_UNIT_FADE_GESTURE = value(:DOTA_UNIT_FADE_GESTURE, 6)
      DOTA_UNIT_SPEECH_CLIENTSIDE_RULES = value(:DOTA_UNIT_SPEECH_CLIENTSIDE_RULES, 7)
    end
    class DOTA_PARTICLE_MESSAGE < ::Protobuf::Enum
      defined_in __FILE__
      DOTA_PARTICLE_MANAGER_EVENT_CREATE = value(:DOTA_PARTICLE_MANAGER_EVENT_CREATE, 0)
      DOTA_PARTICLE_MANAGER_EVENT_UPDATE = value(:DOTA_PARTICLE_MANAGER_EVENT_UPDATE, 1)
      DOTA_PARTICLE_MANAGER_EVENT_UPDATE_FORWARD = value(:DOTA_PARTICLE_MANAGER_EVENT_UPDATE_FORWARD, 2)
      DOTA_PARTICLE_MANAGER_EVENT_UPDATE_ORIENTATION = value(:DOTA_PARTICLE_MANAGER_EVENT_UPDATE_ORIENTATION, 3)
      DOTA_PARTICLE_MANAGER_EVENT_UPDATE_FALLBACK = value(:DOTA_PARTICLE_MANAGER_EVENT_UPDATE_FALLBACK, 4)
      DOTA_PARTICLE_MANAGER_EVENT_UPDATE_ENT = value(:DOTA_PARTICLE_MANAGER_EVENT_UPDATE_ENT, 5)
      DOTA_PARTICLE_MANAGER_EVENT_UPDATE_OFFSET = value(:DOTA_PARTICLE_MANAGER_EVENT_UPDATE_OFFSET, 6)
      DOTA_PARTICLE_MANAGER_EVENT_DESTROY = value(:DOTA_PARTICLE_MANAGER_EVENT_DESTROY, 7)
      DOTA_PARTICLE_MANAGER_EVENT_DESTROY_INVOLVING = value(:DOTA_PARTICLE_MANAGER_EVENT_DESTROY_INVOLVING, 8)
      DOTA_PARTICLE_MANAGER_EVENT_RELEASE = value(:DOTA_PARTICLE_MANAGER_EVENT_RELEASE, 9)
      DOTA_PARTICLE_MANAGER_EVENT_LATENCY = value(:DOTA_PARTICLE_MANAGER_EVENT_LATENCY, 10)
      DOTA_PARTICLE_MANAGER_EVENT_SHOULD_DRAW = value(:DOTA_PARTICLE_MANAGER_EVENT_SHOULD_DRAW, 11)
      DOTA_PARTICLE_MANAGER_EVENT_FROZEN = value(:DOTA_PARTICLE_MANAGER_EVENT_FROZEN, 12)
    end
    class DOTA_OVERHEAD_ALERT < ::Protobuf::Enum
      defined_in __FILE__
      OVERHEAD_ALERT_GOLD = value(:OVERHEAD_ALERT_GOLD, 0)
      OVERHEAD_ALERT_DENY = value(:OVERHEAD_ALERT_DENY, 1)
      OVERHEAD_ALERT_CRITICAL = value(:OVERHEAD_ALERT_CRITICAL, 2)
      OVERHEAD_ALERT_XP = value(:OVERHEAD_ALERT_XP, 3)
      OVERHEAD_ALERT_BONUS_SPELL_DAMAGE = value(:OVERHEAD_ALERT_BONUS_SPELL_DAMAGE, 4)
      OVERHEAD_ALERT_MISS = value(:OVERHEAD_ALERT_MISS, 5)
      OVERHEAD_ALERT_DAMAGE = value(:OVERHEAD_ALERT_DAMAGE, 6)
      OVERHEAD_ALERT_EVADE = value(:OVERHEAD_ALERT_EVADE, 7)
      OVERHEAD_ALERT_BLOCK = value(:OVERHEAD_ALERT_BLOCK, 8)
      OVERHEAD_ALERT_BONUS_POISON_DAMAGE = value(:OVERHEAD_ALERT_BONUS_POISON_DAMAGE, 9)
      OVERHEAD_ALERT_HEAL = value(:OVERHEAD_ALERT_HEAL, 10)
      OVERHEAD_ALERT_MANA_ADD = value(:OVERHEAD_ALERT_MANA_ADD, 11)
      OVERHEAD_ALERT_MANA_LOSS = value(:OVERHEAD_ALERT_MANA_LOSS, 12)
      OVERHEAD_ALERT_LAST_HIT_EARLY = value(:OVERHEAD_ALERT_LAST_HIT_EARLY, 13)
      OVERHEAD_ALERT_LAST_HIT_CLOSE = value(:OVERHEAD_ALERT_LAST_HIT_CLOSE, 14)
      OVERHEAD_ALERT_LAST_HIT_MISS = value(:OVERHEAD_ALERT_LAST_HIT_MISS, 15)
    end
    class CDOTAUserMsg_AIDebugLine < ::Protobuf::Message
      defined_in __FILE__
      optional :string, :message, 1
    end
    class CDOTAUserMsg_Ping < ::Protobuf::Message
      defined_in __FILE__
      optional :string, :message, 1
    end
    class CDOTAUserMsg_SwapVerify < ::Protobuf::Message
      defined_in __FILE__
      optional :uint32, :player_id, 1
    end
    class CDOTAUserMsg_ChatEvent < ::Protobuf::Message
      defined_in __FILE__
      required :DOTA_CHAT_MESSAGE, :type, 1, :default => :CHAT_MESSAGE_INVALID
      optional :uint32, :value, 2
      optional :sint32, :playerid_1, 3, :default => -1
      optional :sint32, :playerid_2, 4, :default => -1
      optional :sint32, :playerid_3, 5, :default => -1
      optional :sint32, :playerid_4, 6, :default => -1
      optional :sint32, :playerid_5, 7, :default => -1
      optional :sint32, :playerid_6, 8, :default => -1
    end
    class CDOTAUserMsg_CombatLogData < ::Protobuf::Message
      defined_in __FILE__
      optional :DOTA_COMBATLOG_TYPES, :type, 1, :default => :DOTA_COMBATLOG_DAMAGE
      optional :uint32, :target_name, 2
      optional :uint32, :attacker_name, 3
      optional :bool, :attacker_illusion, 4
      optional :bool, :target_illusion, 5
      optional :uint32, :inflictor_name, 6
      optional :int32, :value, 7
      optional :int32, :health, 8
      optional :float, :time, 9
    end
    class CDOTAUserMsg_CombatLogShowDeath < ::Protobuf::Message
      defined_in __FILE__
    end
    class CDOTAUserMsg_BotChat < ::Protobuf::Message
      defined_in __FILE__
      optional :uint32, :player_id, 1
      optional :string, :format, 2
      optional :string, :message, 3
      optional :string, :target, 4
    end
    class CDOTAUserMsg_CombatHeroPositions < ::Protobuf::Message
      defined_in __FILE__
      optional :uint32, :index, 1
      optional :int32, :time, 2
      optional :CMsgVector2D, :world_pos, 3
      optional :int32, :health, 4
    end
    class CDOTAUserMsg_MiniKillCamInfo < ::Protobuf::Message
      defined_in __FILE__
      class Attacker < ::Protobuf::Message
        defined_in __FILE__
        class Ability < ::Protobuf::Message
          defined_in __FILE__
          optional :uint32, :ability, 1
          optional :int32, :damage, 2
        end
        optional :uint32, :attacker, 1
        optional :int32, :total_damage, 2
        repeated :'CDOTAUserMsg_MiniKillCamInfo::Attacker::Ability', :abilities, 3
      end
      repeated :'CDOTAUserMsg_MiniKillCamInfo::Attacker', :attackers, 1
    end
    class CDOTAUserMsg_GlobalLightColor < ::Protobuf::Message
      defined_in __FILE__
      optional :uint32, :color, 1
      optional :float, :duration, 2
    end
    class CDOTAUserMsg_GlobalLightDirection < ::Protobuf::Message
      defined_in __FILE__
      optional :CMsgVector, :direction, 1
      optional :float, :duration, 2
    end
    class CDOTAUserMsg_LocationPing < ::Protobuf::Message
      defined_in __FILE__
      optional :uint32, :player_id, 1
      optional :CDOTAMsg_LocationPing, :location_ping, 2
    end
    class CDOTAUserMsg_ItemAlert < ::Protobuf::Message
      defined_in __FILE__
      optional :uint32, :player_id, 1
      optional :CDOTAMsg_ItemAlert, :item_alert, 2
    end
    class CDOTAUserMsg_MinimapEvent < ::Protobuf::Message
      defined_in __FILE__
      optional :int32, :event_type, 1
      optional :int32, :entity_handle, 2
      optional :int32, :x, 3
      optional :int32, :y, 4
      optional :int32, :duration, 5
    end
    class CDOTAUserMsg_MapLine < ::Protobuf::Message
      defined_in __FILE__
      optional :int32, :player_id, 1
      optional :CDOTAMsg_MapLine, :mapline, 2
    end
    class CDOTAUserMsg_MinimapDebugPoint < ::Protobuf::Message
      defined_in __FILE__
      optional :CMsgVector, :location, 1
      optional :uint32, :color, 2
      optional :int32, :size, 3
      optional :float, :duration, 4
    end
    class CDOTAUserMsg_CreateLinearProjectile < ::Protobuf::Message
      defined_in __FILE__
      optional :CMsgVector, :origin, 1
      optional :CMsgVector2D, :velocity, 2
      optional :int32, :latency, 3
      optional :int32, :entindex, 4
      optional :int32, :particle_index, 5
      optional :int32, :handle, 6
    end
    class CDOTAUserMsg_DestroyLinearProjectile < ::Protobuf::Message
      defined_in __FILE__
      optional :int32, :handle, 1
    end
    class CDOTAUserMsg_DodgeTrackingProjectiles < ::Protobuf::Message
      defined_in __FILE__
      required :int32, :entindex, 1
    end
    class CDOTAUserMsg_SpectatorPlayerClick < ::Protobuf::Message
      defined_in __FILE__
      required :int32, :entindex, 1
      optional :int32, :order_type, 2
      optional :int32, :target_index, 3
    end
    class CDOTAUserMsg_NevermoreRequiem < ::Protobuf::Message
      defined_in __FILE__
      optional :int32, :entity_handle, 1
      optional :int32, :lines, 2
      optional :CMsgVector, :origin, 3
    end
    class CDOTAUserMsg_InvalidCommand < ::Protobuf::Message
      defined_in __FILE__
      optional :string, :message, 1
    end
    class CDOTAUserMsg_HudError < ::Protobuf::Message
      defined_in __FILE__
      optional :int32, :order_id, 1
    end
    class CDOTAUserMsg_SharedCooldown < ::Protobuf::Message
      defined_in __FILE__
      optional :int32, :entindex, 1
      optional :string, :name, 2
      optional :float, :cooldown, 3
      optional :int32, :name_index, 4
    end
    class CDOTAUserMsg_SetNextAutobuyItem < ::Protobuf::Message
      defined_in __FILE__
      optional :string, :name, 1
    end
    class CDOTAUserMsg_HalloweenDrops < ::Protobuf::Message
      defined_in __FILE__
      repeated :uint32, :item_defs, 1
      repeated :uint32, :player_ids, 2
      optional :uint32, :prize_list, 3
    end
    class CDOTAResponseQuerySerialized < ::Protobuf::Message
      defined_in __FILE__
      class Fact < ::Protobuf::Message
        defined_in __FILE__
        class ValueType < ::Protobuf::Enum
          defined_in __FILE__
          NUMERIC = value(:NUMERIC, 1)
          STRING = value(:STRING, 2)
        end
        required :int32, :key, 1
        required :'CDOTAResponseQuerySerialized::Fact::ValueType', :valtype, 2, :default => :NUMERIC
        optional :float, :val_numeric, 3
        optional :string, :val_string, 4
      end
      repeated :'CDOTAResponseQuerySerialized::Fact', :facts, 1
    end
    class CDOTASpeechMatchOnClient < ::Protobuf::Message
      defined_in __FILE__
      optional :int32, :concept, 1
      optional :int32, :recipient_type, 2
      optional :CDOTAResponseQuerySerialized, :responsequery, 3
      optional :sfixed32, :randomseed, 4, :default => 0
    end
    class CDOTAUserMsg_UnitEvent < ::Protobuf::Message
      defined_in __FILE__
      class Speech < ::Protobuf::Message
        defined_in __FILE__
        optional :int32, :concept, 1
        optional :string, :response, 2
        optional :int32, :recipient_type, 3
        optional :int32, :level, 4
        optional :bool, :muteable, 5, :default => false
      end
      class SpeechMute < ::Protobuf::Message
        defined_in __FILE__
        optional :float, :delay, 1, :default => 0.5
      end
      class AddGesture < ::Protobuf::Message
        defined_in __FILE__
        optional :Activity, :activity, 1, :default => :ACT_INVALID
        optional :int32, :slot, 2
        optional :float, :fade_in, 3, :default => 0
        optional :float, :fade_out, 4, :default => 0.1
      end
      class RemoveGesture < ::Protobuf::Message
        defined_in __FILE__
        optional :Activity, :activity, 1, :default => :ACT_INVALID
      end
      class BloodImpact < ::Protobuf::Message
        defined_in __FILE__
        optional :int32, :scale, 1
        optional :int32, :x_normal, 2
        optional :int32, :y_normal, 3
      end
      class FadeGesture < ::Protobuf::Message
        defined_in __FILE__
        optional :Activity, :activity, 1, :default => :ACT_INVALID
      end
      required :EDotaEntityMessages, :msg_type, 1, :default => :DOTA_UNIT_SPEECH
      required :int32, :entity_index, 2
      optional :'CDOTAUserMsg_UnitEvent::Speech', :speech, 3
      optional :'CDOTAUserMsg_UnitEvent::SpeechMute', :speech_mute, 4
      optional :'CDOTAUserMsg_UnitEvent::AddGesture', :add_gesture, 5
      optional :'CDOTAUserMsg_UnitEvent::RemoveGesture', :remove_gesture, 6
      optional :'CDOTAUserMsg_UnitEvent::BloodImpact', :blood_impact, 7
      optional :'CDOTAUserMsg_UnitEvent::FadeGesture', :fade_gesture, 8
      optional :CDOTASpeechMatchOnClient, :speech_match_on_client, 9
    end
    class CDOTAUserMsg_ItemPurchased < ::Protobuf::Message
      defined_in __FILE__
      optional :int32, :item_index, 1
    end
    class CDOTAUserMsg_ItemFound < ::Protobuf::Message
      defined_in __FILE__
      optional :int32, :player, 1
      optional :int32, :quality, 2
      optional :int32, :rarity, 3
      optional :int32, :method, 4
      optional :int32, :itemdef, 5
    end
    class CDOTAUserMsg_ParticleManager < ::Protobuf::Message
      defined_in __FILE__
      class ReleaseParticleIndex < ::Protobuf::Message
        defined_in __FILE__
      end
      class CreateParticle < ::Protobuf::Message
        defined_in __FILE__
        optional :int32, :particle_name_index, 1
        optional :int32, :attach_type, 2
        optional :int32, :entity_handle, 3
      end
      class DestroyParticle < ::Protobuf::Message
        defined_in __FILE__
        optional :bool, :destroy_immediately, 1
      end
      class DestroyParticleInvolving < ::Protobuf::Message
        defined_in __FILE__
        optional :bool, :destroy_immediately, 1
        optional :int32, :entity_handle, 3
      end
      class UpdateParticle < ::Protobuf::Message
        defined_in __FILE__
        optional :int32, :control_point, 1
        optional :CMsgVector, :position, 2
      end
      class UpdateParticleFwd < ::Protobuf::Message
        defined_in __FILE__
        optional :int32, :control_point, 1
        optional :CMsgVector, :forward, 2
      end
      class UpdateParticleOrient < ::Protobuf::Message
        defined_in __FILE__
        optional :int32, :control_point, 1
        optional :CMsgVector, :forward, 2
        optional :CMsgVector, :right, 3
        optional :CMsgVector, :up, 4
      end
      class UpdateParticleFallback < ::Protobuf::Message
        defined_in __FILE__
        optional :int32, :control_point, 1
        optional :CMsgVector, :position, 2
      end
      class UpdateParticleOffset < ::Protobuf::Message
        defined_in __FILE__
        optional :int32, :control_point, 1
        optional :CMsgVector, :origin_offset, 2
      end
      class UpdateParticleEnt < ::Protobuf::Message
        defined_in __FILE__
        optional :int32, :control_point, 1
        optional :int32, :entity_handle, 2
        optional :int32, :attach_type, 3
        optional :int32, :attachment, 4
        optional :CMsgVector, :fallback_position, 5
      end
      class UpdateParticleSetFrozen < ::Protobuf::Message
        defined_in __FILE__
        optional :bool, :set_frozen, 1
      end
      class UpdateParticleShouldDraw < ::Protobuf::Message
        defined_in __FILE__
        optional :bool, :should_draw, 1
      end
      required :DOTA_PARTICLE_MESSAGE, :type, 1, :default => :DOTA_PARTICLE_MANAGER_EVENT_CREATE
      required :uint32, :index, 2
      optional :'CDOTAUserMsg_ParticleManager::ReleaseParticleIndex', :release_particle_index, 3
      optional :'CDOTAUserMsg_ParticleManager::CreateParticle', :create_particle, 4
      optional :'CDOTAUserMsg_ParticleManager::DestroyParticle', :destroy_particle, 5
      optional :'CDOTAUserMsg_ParticleManager::DestroyParticleInvolving', :destroy_particle_involving, 6
      optional :'CDOTAUserMsg_ParticleManager::UpdateParticle', :update_particle, 7
      optional :'CDOTAUserMsg_ParticleManager::UpdateParticleFwd', :update_particle_fwd, 8
      optional :'CDOTAUserMsg_ParticleManager::UpdateParticleOrient', :update_particle_orient, 9
      optional :'CDOTAUserMsg_ParticleManager::UpdateParticleFallback', :update_particle_fallback, 10
      optional :'CDOTAUserMsg_ParticleManager::UpdateParticleOffset', :update_particle_offset, 11
      optional :'CDOTAUserMsg_ParticleManager::UpdateParticleEnt', :update_particle_ent, 12
      optional :'CDOTAUserMsg_ParticleManager::UpdateParticleShouldDraw', :update_particle_should_draw, 14
      optional :'CDOTAUserMsg_ParticleManager::UpdateParticleSetFrozen', :update_particle_set_frozen, 15
    end
    class CDOTAUserMsg_OverheadEvent < ::Protobuf::Message
      defined_in __FILE__
      required :DOTA_OVERHEAD_ALERT, :message_type, 1, :default => :OVERHEAD_ALERT_GOLD
      optional :int32, :value, 2
      optional :int32, :target_player_entindex, 3
      optional :int32, :target_entindex, 4
      optional :int32, :source_player_entindex, 5
    end
    class CDOTAUserMsg_TutorialTipInfo < ::Protobuf::Message
      defined_in __FILE__
      optional :string, :name, 1
      optional :int32, :progress, 2
    end
    class CDOTAUserMsg_TutorialFinish < ::Protobuf::Message
      defined_in __FILE__
      optional :string, :heading, 1
      optional :string, :emblem, 2
      optional :string, :body, 3
      optional :bool, :success, 4
    end
    class CDOTAUserMsg_SendGenericToolTip < ::Protobuf::Message
      defined_in __FILE__
      optional :string, :title, 1
      optional :string, :text, 2
      optional :int32, :entindex, 3
      optional :bool, :close, 4
    end
    class CDOTAUserMsg_WorldLine < ::Protobuf::Message
      defined_in __FILE__
      optional :int32, :player_id, 1
      optional :CDOTAMsg_WorldLine, :worldline, 2
    end
    class CDOTAUserMsg_TournamentDrop < ::Protobuf::Message
      defined_in __FILE__
      optional :string, :winner_name, 1
      optional :int32, :event_type, 2
    end
    class CDOTAUserMsg_ChatWheel < ::Protobuf::Message
      defined_in __FILE__
      optional :EDOTAChatWheelMessage, :chat_message, 1, :default => :k_EDOTA_CW_Ok
      optional :uint32, :player_id, 2
      optional :uint32, :account_id, 3
    end
    class CDOTAUserMsg_ReceivedXmasGift < ::Protobuf::Message
      defined_in __FILE__
      optional :int32, :player_id, 1
      optional :string, :item_name, 2
      optional :int32, :inventory_slot, 3
    end
    class CDOTAUserMsg_ShowSurvey < ::Protobuf::Message
      defined_in __FILE__
      optional :int32, :survey_id, 1
    end
    class CDOTAUserMsg_UpdateSharedContent < ::Protobuf::Message
      defined_in __FILE__
      optional :int32, :slot_type, 1
    end
    class CDOTAUserMsg_TutorialRequestExp < ::Protobuf::Message
      defined_in __FILE__
    end
    class CDOTAUserMsg_TutorialFade < ::Protobuf::Message
      defined_in __FILE__
      optional :int32, :tgt_alpha, 1
    end
    class CDOTAUserMsg_TutorialPingMinimap < ::Protobuf::Message
      defined_in __FILE__
      optional :uint32, :player_id, 1
      optional :float, :pos_x, 2
      optional :float, :pos_y, 3
      optional :float, :pos_z, 4
      optional :int32, :entity_index, 5
    end
    class CDOTA_UM_GamerulesStateChanged < ::Protobuf::Message
      defined_in __FILE__
      optional :uint32, :state, 1
    end
    class CDOTAUserMsg_AddQuestLogEntry < ::Protobuf::Message
      defined_in __FILE__
      optional :string, :npc_name, 1
      optional :string, :npc_dialog, 2
      optional :bool, :quest, 3
      optional :int32, :quest_type, 4
    end
    class CDOTAUserMsg_SendStatPopup < ::Protobuf::Message
      defined_in __FILE__
      optional :int32, :player_id, 1
      optional :CDOTAMsg_SendStatPopup, :statpopup, 2
    end
    class CDOTAUserMsg_SendRoshanPopup < ::Protobuf::Message
      defined_in __FILE__
      optional :bool, :reclaimed, 1
      optional :int32, :gametime, 2
    end
    class CDOTAUserMsg_SendFinalGold < ::Protobuf::Message
      defined_in __FILE__
      repeated :uint32, :reliable_gold, 1
      repeated :uint32, :unreliable_gold, 2
    end
  end
end
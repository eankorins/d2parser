require_relative### Generated by rprotoc. DO NOT EDIT!
### <proto file: protobuf\netmessages.proto>
# 
# package google.protobuf;
# enum NET_Messages {
# 	net_NOP = 0;
# 	net_Disconnect = 1;
# 	net_File = 2;
# 	net_SplitScreenUser = 3;
# 	net_Tick = 4;
# 	net_StringCmd = 5;
# 	net_SetConVar = 6;
# 	net_SignonState = 7;
# }
# 
# enum CLC_Messages {
# 	clc_ClientInfo = 8;
# 	clc_Move = 9;
# 	clc_VoiceData = 10;
# 	clc_BaselineAck = 11;
# 	clc_ListenEvents = 12;
# 	clc_RespondCvarValue = 13;
# 	clc_FileCRCCheck = 14;
# 	clc_LoadingProgress = 15;
# 	clc_SplitPlayerConnect = 16;
# 	clc_ClientMessage = 17;
# }
# 
# enum VoiceDataFormat_t {
# 	VOICEDATA_FORMAT_STEAM = 0;
# 	VOICEDATA_FORMAT_ENGINE = 1;
# }
# 
# enum SVC_Messages {
# 	svc_ServerInfo = 8;
# 	svc_SendTable = 9;
# 	svc_ClassInfo = 10;
# 	svc_SetPause = 11;
# 	svc_CreateStringTable = 12;
# 	svc_UpdateStringTable = 13;
# 	svc_VoiceInit = 14;
# 	svc_VoiceData = 15;
# 	svc_Print = 16;
# 	svc_Sounds = 17;
# 	svc_SetView = 18;
# 	svc_FixAngle = 19;
# 	svc_CrosshairAngle = 20;
# 	svc_BSPDecal = 21;
# 	svc_SplitScreen = 22;
# 	svc_UserMessage = 23;
# 	svc_EntityMessage = 24;
# 	svc_GameEvent = 25;
# 	svc_PacketEntities = 26;
# 	svc_TempEntities = 27;
# 	svc_Prefetch = 28;
# 	svc_Menu = 29;
# 	svc_GameEventList = 30;
# 	svc_GetCvarValue = 31;
# 	svc_PacketReliable = 32;
# }
# 
# enum ESplitScreenMessageType {
# 	MSG_SPLITSCREEN_ADDUSER = 0;
# 	MSG_SPLITSCREEN_REMOVEUSER = 1;
# }
# 
# message CMsg_CVars {
# 	message CVar {
# 		optional string name = 1;
# 		optional string value = 2;
# 	}
# 
# 	repeated CMsg_CVars.CVar cvars = 1;
# }
# 
# message CNETMsg_NOP {
# }
# 
# message CNETMsg_Disconnect {
# 	optional string text = 1;
# }
# 
# message CNETMsg_File {
# 	optional int32 transfer_id = 1;
# 	optional string file_name = 2;
# 	optional bool is_replay_demo_file = 3;
# 	optional bool deny = 4;
# }
# 
# message CNETMsg_SplitScreenUser {
# 	optional int32 slot = 1;
# }
# 
# message CNETMsg_Tick {
# 	optional uint32 tick = 1;
# 	optional uint32 host_frametime = 2;
# 	optional uint32 host_frametime_std_deviation = 3;
# }
# 
# message CNETMsg_StringCmd {
# 	optional string command = 1;
# }
# 
# message CNETMsg_SetConVar {
# 	optional CMsg_CVars convars = 1;
# }
# 
# message CNETMsg_SignonState {
# 	optional uint32 signon_state = 1;
# 	optional uint32 spawn_count = 2;
# 	optional uint32 num_server_players = 3;
# 	repeated string players_networkids = 4;
# 	optional string map_name = 5;
# }
# 
# message CCLCMsg_ClientInfo {
# 	optional fixed32 send_table_crc = 1;
# 	optional uint32 server_count = 2;
# 	optional bool is_hltv = 3;
# 	optional bool is_replay = 4;
# 	optional uint32 friends_id = 5;
# 	optional string friends_name = 6;
# 	repeated fixed32 custom_files = 7;
# }
# 
# message CCLCMsg_Move {
# 	optional uint32 num_backup_commands = 1;
# 	optional uint32 num_new_commands = 2;
# 	optional bytes data = 3;
# }
# 
# message CCLCMsg_VoiceData {
# 	optional bytes data = 1;
# 	optional fixed64 xuid = 2;
# 	optional VoiceDataFormat_t format = 3 [default = VOICEDATA_FORMAT_STEAM];
# }
# 
# message CCLCMsg_BaselineAck {
# 	optional int32 baseline_tick = 1;
# 	optional int32 baseline_nr = 2;
# }
# 
# message CCLCMsg_ListenEvents {
# 	repeated fixed32 event_mask = 1;
# }
# 
# message CCLCMsg_RespondCvarValue {
# 	optional int32 cookie = 1;
# 	optional int32 status_code = 2;
# 	optional string name = 3;
# 	optional string value = 4;
# }
# 
# message CCLCMsg_FileCRCCheck {
# 	optional int32 code_path = 1;
# 	optional string path = 2;
# 	optional int32 code_filename = 3;
# 	optional string filename = 4;
# 	optional fixed32 crc = 5;
# }
# 
# message CCLCMsg_LoadingProgress {
# 	optional int32 progress = 1;
# }
# 
# message CCLCMsg_SplitPlayerConnect {
# 	optional CMsg_CVars convars = 1;
# }
# 
# message CCLCMsg_ClientMessage {
# 	optional int32 msg_type = 1;
# 	optional bytes data = 2;
# }
# 
# message CSVCMsg_ServerInfo {
# 	optional int32 protocol = 1;
# 	optional int32 server_count = 2;
# 	optional bool is_dedicated = 3;
# 	optional bool is_hltv = 4;
# 	optional bool is_replay = 5;
# 	optional int32 c_os = 6;
# 	optional fixed32 map_crc = 7;
# 	optional fixed32 client_crc = 8;
# 	optional fixed32 string_table_crc = 9;
# 	optional int32 max_clients = 10;
# 	optional int32 max_classes = 11;
# 	optional int32 player_slot = 12;
# 	optional float tick_interval = 13;
# 	optional string game_dir = 14;
# 	optional string map_name = 15;
# 	optional string sky_name = 16;
# 	optional string host_name = 17;
# }
# 
# message CSVCMsg_ClassInfo {
# 	message class_t {
# 		optional int32 class_id = 1;
# 		optional string data_table_name = 2;
# 		optional string class_name = 3;
# 	}
# 
# 	optional bool create_on_client = 1;
# 	repeated CSVCMsg_ClassInfo.class_t classes = 2;
# }
# 
# message CSVCMsg_SetPause {
# 	optional bool paused = 1;
# }
# 
# message CSVCMsg_VoiceInit {
# 	optional int32 quality = 1;
# 	optional string codec = 2;
# 	optional int32 version = 3 [default = 0];
# }
# 
# message CSVCMsg_Print {
# 	optional string text = 1;
# }
# 
# message CSVCMsg_Sounds {
# 	message sounddata_t {
# 		optional sint32 origin_x = 1;
# 		optional sint32 origin_y = 2;
# 		optional sint32 origin_z = 3;
# 		optional uint32 volume = 4;
# 		optional float delay_value = 5;
# 		optional int32 sequence_number = 6;
# 		optional int32 entity_index = 7;
# 		optional int32 channel = 8;
# 		optional int32 pitch = 9;
# 		optional int32 flags = 10;
# 		optional uint32 sound_num = 11;
# 		optional fixed32 sound_num_handle = 12;
# 		optional int32 speaker_entity = 13;
# 		optional int32 random_seed = 14;
# 		optional int32 sound_level = 15;
# 		optional bool is_sentence = 16;
# 		optional bool is_ambient = 17;
# 	}
# 
# 	optional bool reliable_sound = 1;
# 	repeated CSVCMsg_Sounds.sounddata_t sounds = 2;
# }
# 
# message CSVCMsg_Prefetch {
# 	optional int32 sound_index = 1;
# }
# 
# message CSVCMsg_SetView {
# 	optional int32 entity_index = 1;
# }
# 
# message CSVCMsg_FixAngle {
# 	optional bool relative = 1;
# 	optional CMsgQAngle angle = 2;
# }
# 
# message CSVCMsg_CrosshairAngle {
# 	optional CMsgQAngle angle = 1;
# }
# 
# message CSVCMsg_BSPDecal {
# 	optional CMsgVector pos = 1;
# 	optional int32 decal_texture_index = 2;
# 	optional int32 entity_index = 3;
# 	optional int32 model_index = 4;
# 	optional bool low_priority = 5;
# }
# 
# message CSVCMsg_SplitScreen {
# 	optional ESplitScreenMessageType type = 1 [default = MSG_SPLITSCREEN_ADDUSER];
# 	optional int32 slot = 2;
# 	optional int32 player_index = 3;
# }
# 
# message CSVCMsg_GetCvarValue {
# 	optional int32 cookie = 1;
# 	optional string cvar_name = 2;
# }
# 
# message CSVCMsg_Menu {
# 	optional int32 dialog_type = 1;
# 	optional bytes menu_key_values = 2;
# }
# 
# message CSVCMsg_SendTable {
# 	message sendprop_t {
# 		optional int32 type = 1;
# 		optional string var_name = 2;
# 		optional int32 flags = 3;
# 		optional int32 priority = 4;
# 		optional string dt_name = 5;
# 		optional int32 num_elements = 6;
# 		optional float low_value = 7;
# 		optional float high_value = 8;
# 		optional int32 num_bits = 9;
# 	}
# 
# 	optional bool is_end = 1;
# 	optional string net_table_name = 2;
# 	optional bool needs_decoder = 3;
# 	repeated CSVCMsg_SendTable.sendprop_t props = 4;
# }
# 
# message CSVCMsg_GameEventList {
# 	message key_t {
# 		optional int32 type = 1;
# 		optional string name = 2;
# 	}
# 
# 	message descriptor_t {
# 		optional int32 eventid = 1;
# 		optional string name = 2;
# 		repeated CSVCMsg_GameEventList.key_t keys = 3;
# 	}
# 
# 	repeated CSVCMsg_GameEventList.descriptor_t descriptors = 1;
# }
# 
# message CSVCMsg_PacketEntities {
# 	optional int32 max_entries = 1;
# 	optional int32 updated_entries = 2;
# 	optional bool is_delta = 3;
# 	optional bool update_baseline = 4;
# 	optional int32 baseline = 5;
# 	optional int32 delta_from = 6;
# 	optional bytes entity_data = 7;
# }
# 
# message CSVCMsg_TempEntities {
# 	optional bool reliable = 1;
# 	optional int32 num_entries = 2;
# 	optional bytes entity_data = 3;
# }
# 
# message CSVCMsg_CreateStringTable {
# 	optional string name = 1;
# 	optional int32 max_entries = 2;
# 	optional int32 num_entries = 3;
# 	optional bool user_data_fixed_size = 4;
# 	optional int32 user_data_size = 5;
# 	optional int32 user_data_size_bits = 6;
# 	optional int32 flags = 7;
# 	optional bytes string_data = 8;
# }
# 
# message CSVCMsg_UpdateStringTable {
# 	optional int32 table_id = 1;
# 	optional int32 num_changed_entries = 2;
# 	optional bytes string_data = 3;
# }
# 
# message CSVCMsg_VoiceData {
# 	optional int32 client = 1;
# 	optional bool proximity = 2;
# 	optional fixed64 xuid = 3;
# 	optional int32 audible_mask = 4;
# 	optional bytes voice_data = 5;
# 	optional VoiceDataFormat_t format = 6 [default = VOICEDATA_FORMAT_STEAM];
# }
# 
# message CSVCMsg_PacketReliable {
# 	optional int32 tick = 1;
# 	optional int32 messagessize = 2;
# }
# 

require_relative 'protobuf/message/message'
require_relative 'protobuf/message/enum'
require_relative 'protobuf/message/service'
require_relative 'protobuf/message/extend'

module D2Parser
  module Proto
    class NET_Messages < ::Protobuf::Enum
      defined_in __FILE__
      Net_NOP = value(:net_NOP, 0)
      Net_Disconnect = value(:net_Disconnect, 1)
      Net_File = value(:net_File, 2)
      Net_SplitScreenUser = value(:net_SplitScreenUser, 3)
      Net_Tick = value(:net_Tick, 4)
      Net_StringCmd = value(:net_StringCmd, 5)
      Net_SetConVar = value(:net_SetConVar, 6)
      Net_SignonState = value(:net_SignonState, 7)
    end
    class CLC_Messages < ::Protobuf::Enum
      defined_in __FILE__
      Clc_ClientInfo = value(:clc_ClientInfo, 8)
      Clc_Move = value(:clc_Move, 9)
      Clc_VoiceData = value(:clc_VoiceData, 10)
      Clc_BaselineAck = value(:clc_BaselineAck, 11)
      Clc_ListenEvents = value(:clc_ListenEvents, 12)
      Clc_RespondCvarValue = value(:clc_RespondCvarValue, 13)
      Clc_FileCRCCheck = value(:clc_FileCRCCheck, 14)
      Clc_LoadingProgress = value(:clc_LoadingProgress, 15)
      Clc_SplitPlayerConnect = value(:clc_SplitPlayerConnect, 16)
      Clc_ClientMessage = value(:clc_ClientMessage, 17)
    end
    class VoiceDataFormat_t < ::Protobuf::Enum
      defined_in __FILE__
      VOICEDATA_FORMAT_STEAM = value(:VOICEDATA_FORMAT_STEAM, 0)
      VOICEDATA_FORMAT_ENGINE = value(:VOICEDATA_FORMAT_ENGINE, 1)
    end
    class SVC_Messages < ::Protobuf::Enum
      defined_in __FILE__
      Svc_ServerInfo = value(:svc_ServerInfo, 8)
      Svc_SendTable = value(:svc_SendTable, 9)
      Svc_ClassInfo = value(:svc_ClassInfo, 10)
      Svc_SetPause = value(:svc_SetPause, 11)
      Svc_CreateStringTable = value(:svc_CreateStringTable, 12)
      Svc_UpdateStringTable = value(:svc_UpdateStringTable, 13)
      Svc_VoiceInit = value(:svc_VoiceInit, 14)
      Svc_VoiceData = value(:svc_VoiceData, 15)
      Svc_Print = value(:svc_Print, 16)
      Svc_Sounds = value(:svc_Sounds, 17)
      Svc_SetView = value(:svc_SetView, 18)
      Svc_FixAngle = value(:svc_FixAngle, 19)
      Svc_CrosshairAngle = value(:svc_CrosshairAngle, 20)
      Svc_BSPDecal = value(:svc_BSPDecal, 21)
      Svc_SplitScreen = value(:svc_SplitScreen, 22)
      Svc_UserMessage = value(:svc_UserMessage, 23)
      Svc_EntityMessage = value(:svc_EntityMessage, 24)
      Svc_GameEvent = value(:svc_GameEvent, 25)
      Svc_PacketEntities = value(:svc_PacketEntities, 26)
      Svc_TempEntities = value(:svc_TempEntities, 27)
      Svc_Prefetch = value(:svc_Prefetch, 28)
      Svc_Menu = value(:svc_Menu, 29)
      Svc_GameEventList = value(:svc_GameEventList, 30)
      Svc_GetCvarValue = value(:svc_GetCvarValue, 31)
      Svc_PacketReliable = value(:svc_PacketReliable, 32)
    end
    class ESplitScreenMessageType < ::Protobuf::Enum
      defined_in __FILE__
      MSG_SPLITSCREEN_ADDUSER = value(:MSG_SPLITSCREEN_ADDUSER, 0)
      MSG_SPLITSCREEN_REMOVEUSER = value(:MSG_SPLITSCREEN_REMOVEUSER, 1)
    end
    class CMsg_CVars < ::Protobuf::Message
      defined_in __FILE__
      class CVar < ::Protobuf::Message
        defined_in __FILE__
        optional :string, :name, 1
        optional :string, :value, 2
      end
      repeated :'CMsg_CVars::CVar', :cvars, 1
    end
    class CNETMsg_NOP < ::Protobuf::Message
      defined_in __FILE__
    end
    class CNETMsg_Disconnect < ::Protobuf::Message
      defined_in __FILE__
      optional :string, :text, 1
    end
    class CNETMsg_File < ::Protobuf::Message
      defined_in __FILE__
      optional :int32, :transfer_id, 1
      optional :string, :file_name, 2
      optional :bool, :is_replay_demo_file, 3
      optional :bool, :deny, 4
    end
    class CNETMsg_SplitScreenUser < ::Protobuf::Message
      defined_in __FILE__
      optional :int32, :slot, 1
    end
    class CNETMsg_Tick < ::Protobuf::Message
      defined_in __FILE__
      optional :uint32, :tick, 1
      optional :uint32, :host_frametime, 2
      optional :uint32, :host_frametime_std_deviation, 3
    end
    class CNETMsg_StringCmd < ::Protobuf::Message
      defined_in __FILE__
      optional :string, :command, 1
    end
    class CNETMsg_SetConVar < ::Protobuf::Message
      defined_in __FILE__
      optional :CMsg_CVars, :convars, 1
    end
    class CNETMsg_SignonState < ::Protobuf::Message
      defined_in __FILE__
      optional :uint32, :signon_state, 1
      optional :uint32, :spawn_count, 2
      optional :uint32, :num_server_players, 3
      repeated :string, :players_networkids, 4
      optional :string, :map_name, 5
    end
    class CCLCMsg_ClientInfo < ::Protobuf::Message
      defined_in __FILE__
      optional :fixed32, :send_table_crc, 1
      optional :uint32, :server_count, 2
      optional :bool, :is_hltv, 3
      optional :bool, :is_replay, 4
      optional :uint32, :friends_id, 5
      optional :string, :friends_name, 6
      repeated :fixed32, :custom_files, 7
    end
    class CCLCMsg_Move < ::Protobuf::Message
      defined_in __FILE__
      optional :uint32, :num_backup_commands, 1
      optional :uint32, :num_new_commands, 2
      optional :bytes, :data, 3
    end
    class CCLCMsg_VoiceData < ::Protobuf::Message
      defined_in __FILE__
      optional :bytes, :data, 1
      optional :fixed64, :xuid, 2
      optional :VoiceDataFormat_t, :format, 3, :default => :VOICEDATA_FORMAT_STEAM
    end
    class CCLCMsg_BaselineAck < ::Protobuf::Message
      defined_in __FILE__
      optional :int32, :baseline_tick, 1
      optional :int32, :baseline_nr, 2
    end
    class CCLCMsg_ListenEvents < ::Protobuf::Message
      defined_in __FILE__
      repeated :fixed32, :event_mask, 1
    end
    class CCLCMsg_RespondCvarValue < ::Protobuf::Message
      defined_in __FILE__
      optional :int32, :cookie, 1
      optional :int32, :status_code, 2
      optional :string, :name, 3
      optional :string, :value, 4
    end
    class CCLCMsg_FileCRCCheck < ::Protobuf::Message
      defined_in __FILE__
      optional :int32, :code_path, 1
      optional :string, :path, 2
      optional :int32, :code_filename, 3
      optional :string, :filename, 4
      optional :fixed32, :crc, 5
    end
    class CCLCMsg_LoadingProgress < ::Protobuf::Message
      defined_in __FILE__
      optional :int32, :progress, 1
    end
    class CCLCMsg_SplitPlayerConnect < ::Protobuf::Message
      defined_in __FILE__
      optional :CMsg_CVars, :convars, 1
    end
    class CCLCMsg_ClientMessage < ::Protobuf::Message
      defined_in __FILE__
      optional :int32, :msg_type, 1
      optional :bytes, :data, 2
    end
    class CSVCMsg_ServerInfo < ::Protobuf::Message
      defined_in __FILE__
      optional :int32, :protocol, 1
      optional :int32, :server_count, 2
      optional :bool, :is_dedicated, 3
      optional :bool, :is_hltv, 4
      optional :bool, :is_replay, 5
      optional :int32, :c_os, 6
      optional :fixed32, :map_crc, 7
      optional :fixed32, :client_crc, 8
      optional :fixed32, :string_table_crc, 9
      optional :int32, :max_clients, 10
      optional :int32, :max_classes, 11
      optional :int32, :player_slot, 12
      optional :float, :tick_interval, 13
      optional :string, :game_dir, 14
      optional :string, :map_name, 15
      optional :string, :sky_name, 16
      optional :string, :host_name, 17
    end
    class CSVCMsg_ClassInfo < ::Protobuf::Message
      defined_in __FILE__
      class Class_t < ::Protobuf::Message
        defined_in __FILE__
        optional :int32, :class_id, 1
        optional :string, :data_table_name, 2
        optional :string, :class_name, 3
      end
      optional :bool, :create_on_client, 1
      repeated :'CSVCMsg_ClassInfo::class_t', :classes, 2
    end
    class CSVCMsg_SetPause < ::Protobuf::Message
      defined_in __FILE__
      optional :bool, :paused, 1
    end
    class CSVCMsg_VoiceInit < ::Protobuf::Message
      defined_in __FILE__
      optional :int32, :quality, 1
      optional :string, :codec, 2
      optional :int32, :version, 3, :default => 0
    end
    class CSVCMsg_Print < ::Protobuf::Message
      defined_in __FILE__
      optional :string, :text, 1
    end
    class CSVCMsg_Sounds < ::Protobuf::Message
      defined_in __FILE__
      class Sounddata_t < ::Protobuf::Message
        defined_in __FILE__
        optional :sint32, :origin_x, 1
        optional :sint32, :origin_y, 2
        optional :sint32, :origin_z, 3
        optional :uint32, :volume, 4
        optional :float, :delay_value, 5
        optional :int32, :sequence_number, 6
        optional :int32, :entity_index, 7
        optional :int32, :channel, 8
        optional :int32, :pitch, 9
        optional :int32, :flags, 10
        optional :uint32, :sound_num, 11
        optional :fixed32, :sound_num_handle, 12
        optional :int32, :speaker_entity, 13
        optional :int32, :random_seed, 14
        optional :int32, :sound_level, 15
        optional :bool, :is_sentence, 16
        optional :bool, :is_ambient, 17
      end
      optional :bool, :reliable_sound, 1
      repeated :'CSVCMsg_Sounds::sounddata_t', :sounds, 2
    end
    class CSVCMsg_Prefetch < ::Protobuf::Message
      defined_in __FILE__
      optional :int32, :sound_index, 1
    end
    class CSVCMsg_SetView < ::Protobuf::Message
      defined_in __FILE__
      optional :int32, :entity_index, 1
    end
    class CSVCMsg_FixAngle < ::Protobuf::Message
      defined_in __FILE__
      optional :bool, :relative, 1
      optional :CMsgQAngle, :angle, 2
    end
    class CSVCMsg_CrosshairAngle < ::Protobuf::Message
      defined_in __FILE__
      optional :CMsgQAngle, :angle, 1
    end
    class CSVCMsg_BSPDecal < ::Protobuf::Message
      defined_in __FILE__
      optional :CMsgVector, :pos, 1
      optional :int32, :decal_texture_index, 2
      optional :int32, :entity_index, 3
      optional :int32, :model_index, 4
      optional :bool, :low_priority, 5
    end
    class CSVCMsg_SplitScreen < ::Protobuf::Message
      defined_in __FILE__
      optional :ESplitScreenMessageType, :type, 1, :default => :MSG_SPLITSCREEN_ADDUSER
      optional :int32, :slot, 2
      optional :int32, :player_index, 3
    end
    class CSVCMsg_GetCvarValue < ::Protobuf::Message
      defined_in __FILE__
      optional :int32, :cookie, 1
      optional :string, :cvar_name, 2
    end
    class CSVCMsg_Menu < ::Protobuf::Message
      defined_in __FILE__
      optional :int32, :dialog_type, 1
      optional :bytes, :menu_key_values, 2
    end
    class CSVCMsg_SendTable < ::Protobuf::Message
      defined_in __FILE__
      class Sendprop_t < ::Protobuf::Message
        defined_in __FILE__
        optional :int32, :type, 1
        optional :string, :var_name, 2
        optional :int32, :flags, 3
        optional :int32, :priority, 4
        optional :string, :dt_name, 5
        optional :int32, :num_elements, 6
        optional :float, :low_value, 7
        optional :float, :high_value, 8
        optional :int32, :num_bits, 9
      end
      optional :bool, :is_end, 1
      optional :string, :net_table_name, 2
      optional :bool, :needs_decoder, 3
      repeated :'CSVCMsg_SendTable::sendprop_t', :props, 4
    end
    class CSVCMsg_GameEventList < ::Protobuf::Message
      defined_in __FILE__
      class Key_t < ::Protobuf::Message
        defined_in __FILE__
        optional :int32, :type, 1
        optional :string, :name, 2
      end
      class Descriptor_t < ::Protobuf::Message
        defined_in __FILE__
        optional :int32, :eventid, 1
        optional :string, :name, 2
        repeated :'CSVCMsg_GameEventList::key_t', :keys, 3
      end
      repeated :'CSVCMsg_GameEventList::descriptor_t', :descriptors, 1
    end
    class CSVCMsg_PacketEntities < ::Protobuf::Message
      defined_in __FILE__
      optional :int32, :max_entries, 1
      optional :int32, :updated_entries, 2
      optional :bool, :is_delta, 3
      optional :bool, :update_baseline, 4
      optional :int32, :baseline, 5
      optional :int32, :delta_from, 6
      optional :bytes, :entity_data, 7
    end
    class CSVCMsg_TempEntities < ::Protobuf::Message
      defined_in __FILE__
      optional :bool, :reliable, 1
      optional :int32, :num_entries, 2
      optional :bytes, :entity_data, 3
    end
    class CSVCMsg_CreateStringTable < ::Protobuf::Message
      defined_in __FILE__
      optional :string, :name, 1
      optional :int32, :max_entries, 2
      optional :int32, :num_entries, 3
      optional :bool, :user_data_fixed_size, 4
      optional :int32, :user_data_size, 5
      optional :int32, :user_data_size_bits, 6
      optional :int32, :flags, 7
      optional :bytes, :string_data, 8
    end
    class CSVCMsg_UpdateStringTable < ::Protobuf::Message
      defined_in __FILE__
      optional :int32, :table_id, 1
      optional :int32, :num_changed_entries, 2
      optional :bytes, :string_data, 3
    end
    class CSVCMsg_VoiceData < ::Protobuf::Message
      defined_in __FILE__
      optional :int32, :client, 1
      optional :bool, :proximity, 2
      optional :fixed64, :xuid, 3
      optional :int32, :audible_mask, 4
      optional :bytes, :voice_data, 5
      optional :VoiceDataFormat_t, :format, 6, :default => :VOICEDATA_FORMAT_STEAM
    end
    class CSVCMsg_PacketReliable < ::Protobuf::Message
      defined_in __FILE__
      optional :int32, :tick, 1
      optional :int32, :messagessize, 2
    end
  end
end